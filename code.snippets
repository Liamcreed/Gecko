//----Performance----//
        ImGui::Begin("Performance");
        ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / io.Framerate, io.Framerate);
        static std::vector<float> fpsData(1000);
        static float lastTime = 0;
        if ((float)glfwGetTime() - lastTime >= 1.0 / 10)
        {
            lastTime = (float)glfwGetTime();
            fpsData.push_back(io.Framerate);
            fpsData.erase(fpsData.begin());
        }
        ImGui::PlotLines("Framerate", fpsData.data(), (int)fpsData.size(), 0, "",
                         0, 500, {250, 30});
        ImGui::Separator();
        ImGui::End();
        //-------------------//



ImGui::DragFloat3("Camera Transform",
                          glm::value_ptr(m_MainCameraEntity.GetComponent<TransformComponent>().Transform[3]), 0.01f);
        ImGui::DragFloat3("2nd  Camera Transform",
                          glm::value_ptr(m_SecondCameraEntity.GetComponent<TransformComponent>().Transform[3]), 0.01f);

        if (ImGui::Checkbox("Camera A", &m_PrimaryCamera))
        {
            m_SecondCameraEntity.GetComponent<CameraComponent>().Primary = !m_PrimaryCamera;
            m_MainCameraEntity.GetComponent<CameraComponent>().Primary = m_PrimaryCamera;
        }
        {
            auto &camera = m_SecondCameraEntity.GetComponent<CameraComponent>().camera;
            float fov = camera.GetPerspectiveFOV();
            if (ImGui::DragFloat("2nd Camera FOV", &fov))
                camera.SetPerspectiveFOV(fov);
        }
        ImGui::Separator();



m_CamController.OnResize(ImGui::GetWindowSize().x, ImGui::GetWindowSize().y);